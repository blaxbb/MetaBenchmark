@using MetaBenchmark.Shared
@inject HttpClient Http;

@if(AllProducts != null)
{
    <div class="container compare-products">
        <div class="row">
            @for(int i = 0; i < SelectedProducts.Length; i++)
            {
                var index = i;
                <div class="col">
                    <form class="row">
                        <select class="form-control form-control-lg">
                            <option @onclick="(() => Selected(default, index))">Select a product</option>
                            @foreach(var product in AllProducts)
                            {
                                <option @onclick="(() => Selected(product, index))">@product.Name</option>
                            }
                        </select>
                    </form>
                </div>
            }
@*            <div class="col-auto">
                <button class="btn btn-lg" @onclick=AddProduct>
                    <span class="oi oi-plus" aria-hidden="true"></span>
                </button>
            </div>*@
        </div>
        @foreach(var benchmarkId in BenchmarkCount.OrderByDescending(kvp => kvp.Value).Select(kvp => kvp.Key))
        {
            <div class="row benchmark benchmark-@benchmarkId">
                @for(int i = 0; i < SelectedProducts.Length; i++)
                {
                    if (SelectedProducts.Length > i && SelectedProducts[i] != default)
                    {
                        var prod = SelectedProducts[i];
                        var entries = prod.BenchmarkEntries.Where(e => e.BenchmarkId == benchmarkId).ToList();
                        if(entries.Count == 0)
                        {
                            <div class="col">
                               
                            </div>
                            continue;
                        }

                        var avg = entries.Average(e => e.Value);
                        var midpoint = BenchmarkAverages[benchmarkId];
                        var backgroundClass = BenchmarkMaximums[benchmarkId].productId == prod.ID ? "bg-success text-light" : "";

                        <div class="product col row m-0 py-3 @backgroundClass">
                            <div class="col my-auto">
                                @entries.First().Benchmark.Name
                            </div>
                            <div class="col text-center my-auto">
                                @if(avg > midpoint)
                                {
                                    <span class="oi oi-caret-top text-success" aria-hidden="true"></span>
                                }
                                else if(avg < midpoint)
                                {
                                    <span class="oi oi-caret-bottom text-danger" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span class="oi oi-ellipses" aria-hidden="true"></span>
                                }
                            </div>

                            <div class="col">
                                @foreach(var entry in entries)
                                {
                                 <div>@entry.Value</div>   
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col">          
                        </div>
                    }
                }
            </div>
        }
    </div>
}
else
{
    <div>Loading...</div>
}


@code {
    List<Product> AllProducts;
    Product[] SelectedProducts;
    Dictionary<long, double> BenchmarkAverages = new Dictionary<long, double>();

    //key = benchmarkID, value = productID and benchmark value
    Dictionary<long, (long productId, double value)> BenchmarkMaximums = new Dictionary<long, (long productId, double value)>();
    Dictionary<long, int> BenchmarkCount = new Dictionary<long, int>();

    protected override async Task OnInitializedAsync()
    {
        SelectedProducts = new Product[2];
        AllProducts = await Http.GetFromJsonAsync<List<Product>>("api/Products");
        ComputeAverages();

        StateHasChanged();
    }

    void Selected(Product p, int index)
    {
        if (p == null && SelectedProducts.Length > 1)
        {
            var newArr = new Product[SelectedProducts.Length - 1];
            //0 1 2 3
            if(index > 0)
            {
                SelectedProducts.Take(index).ToArray().CopyTo(newArr, 0);
            }
            if(index < SelectedProducts.Length)
            {
                SelectedProducts.Skip(index + 1).ToArray().CopyTo(newArr, index);
            }
            SelectedProducts = newArr;
        }
        else
        {
            SelectedProducts[index] = p;
            if(SelectedProducts.All(prod => prod != default))
            {
                AddProduct();
            }
        }
        ComputeAverages();
        StateHasChanged();
    }

    void ComputeAverages()
    {
        BenchmarkAverages.Clear();
        BenchmarkMaximums.Clear();

        BenchmarkCount.Clear();
        foreach(var product in SelectedProducts)
        {
            if(product == null)
            {
                continue;
            }

            foreach(var groups in product.BenchmarkEntries.GroupBy(e => e.BenchmarkId))
            {
                var avg = groups.Average(g => g.Value);
                if(BenchmarkAverages.ContainsKey(groups.Key))
                {
                    BenchmarkAverages[groups.Key] += avg;
                    BenchmarkCount[groups.Key] += 1;
                    if(BenchmarkMaximums[groups.Key].value < avg)
                    {
                        BenchmarkMaximums[groups.Key] = (product.ID, avg);
                    }
                }
                else
                {
                    BenchmarkAverages.Add(groups.Key, avg);
                    BenchmarkCount.Add(groups.Key, 1);
                    BenchmarkMaximums.Add(groups.Key, (product.ID, avg));
                }
            }
        }

        foreach(var key in BenchmarkAverages.Keys)
        {
            BenchmarkAverages[key] /= BenchmarkCount[key];
        }
    }

    void AddProduct()
    {
        var newArr = new Product[SelectedProducts.Length + 1];
        SelectedProducts.CopyTo(newArr, 0);
        SelectedProducts = newArr;
        StateHasChanged();
    }
}
