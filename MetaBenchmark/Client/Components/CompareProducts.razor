@using MetaBenchmark.Shared
@using Newtonsoft.Json
@inject IHttpClientFactory Http;
@inject IJSRuntime js

@if(AllProducts != null)
{
    <select class="form-control selectpicker form-control-lg"
            id="benchmarkFilter"
            data-live-search="true"
            data-actions-box="true"
            data-selected-text-format="count"
            multiple
            @onchange="((val) => SelectedBenchmark())">
        @foreach(var bench in AvailableBenchmarks)
        {
            <option selected value=@bench.ID>@bench.Name</option>
        }
    </select>
    <div class="compare-products">
        <div class="row justify-content-center">
            @for(int i = 0; i < SelectedProducts.Length; i++)
            {
                var index = i;
                <div class="col card">
                    @if (SelectedProducts[i] == null)
                    {
                        <form class="row card-body">
                            <select data-live-search="true"
                                    data-style="btn-secondary"
                                    class="selectpicker form-control form-control-lg col" 
                                    title="Select a product"
                                    @onchange="((val) => SelectedId((string)val.Value, index))">
                                @foreach (var product in AllProducts)
                                {
                                    <option value=@product.ID>@product.Name</option>
                                }
                            </select>
                            @if(i == SelectedProducts.Length - 1)
                            {
                                <div class="col-auto">
                                    <button class="btn btn-lg" @onclick="AddProduct">
                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                    </button>
                                </div>
                            }
                        </form>
                    }
                    else
                    {
                        <div class="row card-body">
                            <h4 class="col my-auto">@SelectedProducts[i].Name</h4>
                            <button class="btn btn-lg col-auto btn-warning" @onclick="(() => Selected(null, index))">
                                <span class="oi oi-x" aria-hidden="true"></span>
                            </button>
                            @if(i == SelectedProducts.Length - 1)
                            {
                                <div class="col-auto">
                                    <button class="btn btn-lg btn-success" @onclick="AddProduct">
                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                        
                </div>
            }
        </div>
        @foreach(var benchmarkId in BenchmarkCount.Where(kvp => ActiveBenchmarks.Any(b => b.ID == kvp.Key)).OrderByDescending(kvp => kvp.Value).Select(kvp => kvp.Key))
        {
            <div class="row justify-content-center benchmark benchmark-@benchmarkId">
                @for(int i = 0; i < SelectedProducts.Length; i++)
                {
                    if (SelectedProducts.Length > i && SelectedProducts[i] != default)
                    {
                        var prod = SelectedProducts[i];
                        var entries = prod.BenchmarkEntries.Where(e => e.BenchmarkId == benchmarkId).ToList();
                        if(entries.Count == 0)
                        {
                            <div class="col">
                               
                            </div>
                            continue;
                        }

                        var avg = entries.Average(e => e.Value);
                        var midpoint = BenchmarkAverages[benchmarkId];
                        var backgroundClass = BenchmarkMaximums[benchmarkId].productId == prod.ID ? "bg-success text-light" : "";
                        backgroundClass = "";
                        <div class="product col m-0 py-3 @backgroundClass card">
                            <div class="row h-100">
                                <div class="col-auto text-center my-auto">
                                    @if(avg > midpoint)
                                    {
                                        <i class="fas fa-angle-double-up fa-4x text-success"></i>
                                    }
                                    else if(avg < midpoint)
                                    {
                                        <i class="fas fa-angle-double-down fa-4x text-danger"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-ellipsis-h fa-2x"></i>
                                    }
                                </div>
                                <div class="col my-auto">
                                    <h4 class="m-0">@entries.First().Benchmark.Name</h4>
                                </div>

                                <div class="col text-right">
                                    @foreach(var entry in entries)
                                    {
                                        var textClass = GetTextClass(entry);
                                        <div class="row benchmark-entry">
                                            <div class="col"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></div>
                                            <div class="col my-auto @textClass">@entry.ValueLabel()</div>
                                        </div>
                                    }
                                </div>
                                </div>
                        </div>
                    }
                    else
                    {
                        <div class="col">          
                        </div>
                    }
                }
            </div>
        }
    </div>
}
else
{
    <div>Loading...</div>
}


@code {
    List<Product> AllProducts;
    Product[] SelectedProducts;
    Dictionary<long, double> BenchmarkAverages = new Dictionary<long, double>();

    //key = benchmarkID, value = productID and benchmark value
    Dictionary<long, (long productId, double value)> BenchmarkMaximums = new Dictionary<long, (long productId, double value)>();
    Dictionary<long, int> BenchmarkCount = new Dictionary<long, int>();
    List<Benchmark> AvailableBenchmarks = new List<Benchmark>();
    List<Benchmark> ActiveBenchmarks = new List<Benchmark>();

    protected override async Task OnInitializedAsync()
    {
        SelectedProducts = new Product[2];
        AllProducts = await Http.CreateClient("public").GetFromJsonAsync<List<Product>>("api/Products");

        ComputeAverages();

        StateHasChanged();
        await js.InvokeVoidAsync("ShowSelectPicker");
        await js.InvokeVoidAsync("MoveFilterToNav");
    }

    async Task SelectedId(string productId, int index)
    {
        if(long.TryParse(productId, out long id))
        {
            var prod = AllProducts.FirstOrDefault(p => p.ID == id);
            await Selected(prod, index);
        }
        else
        {
            await Selected(null, index);
        }
    }

    async Task Selected(Product p, int index)
    {
        int nullIndex = 0;
        for(int i = 0; i < SelectedProducts.Length; i++)
        {
            if(i == index)
            {
                break;
            }
            if(SelectedProducts[i] == null)
            {
                nullIndex++;
            }
        }

        if (p == null && SelectedProducts.Length > 1)
        {
            if (SelectedProducts.Length > 1)
            {
                var newArr = new Product[SelectedProducts.Length - 1];
                //0 1 2 3
                if (index > 0)
                {
                    SelectedProducts.Take(index).ToArray().CopyTo(newArr, 0);
                }
                if (index < SelectedProducts.Length)
                {
                    SelectedProducts.Skip(index + 1).ToArray().CopyTo(newArr, index);
                }
                SelectedProducts = newArr;
            }
            else
            {
                SelectedProducts = new Product[1];
            }
        }
        else
        {
            SelectedProducts[index] = p;
        }
        ComputeAverages();
        await js.InvokeVoidAsync("RemoveSelectPicker", nullIndex + 1);
        StateHasChanged();
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    void ComputeAverages()
    {
        BenchmarkAverages.Clear();
        BenchmarkMaximums.Clear();
        AvailableBenchmarks.Clear();
        BenchmarkCount.Clear();
        foreach(var product in SelectedProducts)
        {
            if(product == null)
            {
                continue;
            }

            foreach(var groups in product.BenchmarkEntries.GroupBy(e => e.BenchmarkId))
            {
                var avg = groups.Average(g => g.Value);
                if(BenchmarkAverages.ContainsKey(groups.Key))
                {
                    BenchmarkAverages[groups.Key] += avg;
                    BenchmarkCount[groups.Key] += 1;
                    if(BenchmarkMaximums[groups.Key].value < avg)
                    {
                        BenchmarkMaximums[groups.Key] = (product.ID, avg);
                    }
                }
                else
                {
                    var bench = groups.FirstOrDefault();
                    if (bench?.Benchmark != null)
                    {
                        AvailableBenchmarks.Add(bench.Benchmark);
                        ActiveBenchmarks.Add(bench.Benchmark);
                    }

                    BenchmarkAverages.Add(groups.Key, avg);
                    BenchmarkCount.Add(groups.Key, 1);
                    BenchmarkMaximums.Add(groups.Key, (product.ID, avg));
                }
            }
        }

        foreach(var key in BenchmarkAverages.Keys)
        {
            BenchmarkAverages[key] /= BenchmarkCount[key];
        }
    }

    async Task AddProduct()
    {
        var newArr = new Product[SelectedProducts.Length + 1];
        SelectedProducts.CopyTo(newArr, 0);
        SelectedProducts = newArr;
        StateHasChanged();
        await Task.Delay(1);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedBenchmark()
    {
        var items = await js.InvokeAsync<List<string>>("GetActiveBenchmarks");
        ActiveBenchmarks = items.Select(i => AvailableBenchmarks.FirstOrDefault(b => b.ID == long.Parse(i))).ToList();
        Console.WriteLine(JsonConvert.SerializeObject(ActiveBenchmarks.Select(b => b.Name).ToList()));
        StateHasChanged();
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-info",
                    _     => "text-warning"
                };
        }

        return "";
    }
}
