@using MetaBenchmark.Client.Components
@using MetaBenchmark.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

@using MetaBenchmark.Shared
@inject HttpClient Http
@inject IJSRuntime Js

<Modal Name="Add Benchmark Source" Id="AddBenchmarkSourceModal">
	<h3>Add Benchmark Source</h3>
	<EditForm Model="Model">
		<div class="form-group">
			<label for="sourceName">Name</label>
			<InputText class="form-control" id="sourceName" placeholder="Name" @bind-Value=Model.Name />
		</div>
		<div class="form-group">
			<label for="sourceUrl">Url</label>
			<InputText class="form-control" id="sourceUrl" placeholder="Url" @bind-Value=Model.Url />
		</div>
        <div class="form-group">
			<label for="sourceLogo">Logo</label>
			<InputText class="form-control" id="sourceLogo" placeholder="Logo" @bind-Value=Model.LogoUrl />
		</div>
		<button @onclick=SubmitModel class="btn btn-primary">Submit</button>
        @if (Model.Id != -1)
        {
            <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
        }
	</EditForm>
</Modal>

@if (allProducts != null && allBenchmarks != null)
{
    <Modal Name="Add Benchmarks" Id="BulkAddBenchmarksModal">
        <EditForm Model="BulkBenchmark">
            <div class="form-group">
                <label for="benchmark">Benchmark</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" @bind-Value=BulkBenchmark.BenchmarkId>
                    @foreach (var bench in allBenchmarks)
                    {
                        <option value="@bench.ID">@bench.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="benchmark">Product</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" @bind-Value=BulkBenchmark.ProductId>
                    @foreach (var prod in allProducts)
                    {
                        <option value="@prod.ID">@prod.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="benchmarkValue">Value</label>
                <InputNumber class="form-control" id="benchmarkValue" placeholder="Value" @bind-Value=BulkBenchmark.Value />
            </div>
            <button @onclick=SubmitBenchmark class="btn btn-primary">Submit</button>
        </EditForm>	
    </Modal>
}

@if(Sources == null)
{
    <div>Loading....</div>
}
else
{    
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th></th>
                <th>
                    <button class="btn btn-primary btn-sm" @onclick=AddClick>Add</button>
                </th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var source in Sources)
            {
                <tr>
                    <td>@source.Name</td>
                    <td></td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditClick(source))">
                            Edit
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => AddBenchmarksClick(source))">
                            Add Benchmarks
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    BenchmarkSource[] Sources;
    BenchmarkSource Model;

    Benchmark[] allBenchmarks;
    Product[] allProducts;
    BenchmarkEntry BulkBenchmark;


    protected override async Task OnInitializedAsync()
    {
        Model = new BenchmarkSource();
        BulkBenchmark = new BenchmarkEntry();
        await Refresh();
    }

    async Task Refresh()
    {
        try
        {
            Sources = await Http.GetFromJsonAsync<BenchmarkSource[]>("api/BenchmarkSources");
            allBenchmarks = await Http.GetFromJsonAsync<Benchmark[]>($"api/Benchmarks");
            allProducts = await Http.GetFromJsonAsync<Product[]>($"api/Products");
            this.StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async void AddClick()
    {
        Model = new BenchmarkSource();
        Model.Id = -1;
        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkSourceModal");
    }

    async void EditClick(BenchmarkSource source)
    {
        Model = new BenchmarkSource()
        {
            Id = source.Id,
            Name = source.Name,
            BenchmarkEntries = source.BenchmarkEntries,
            LogoUrl = source.LogoUrl,
            Url = source.Url
        };

        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkSourceModal");
    }

    async void AddBenchmarksClick(BenchmarkSource source)
    {
        BulkBenchmark = new BenchmarkEntry()
        {
            SourceId = source.Id,
        };

        await Js.InvokeVoidAsync("ShowModal", "#BulkAddBenchmarksModal");
        await Js.InvokeVoidAsync("ShowSelectPicker");
    }

    async void SubmitModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkSourceModal");
        if (Model.Id == -1)
        {
            Model.Id = 0;
            await Http.PostAsJsonAsync("api/BenchmarkSources", Model);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/BenchmarkSources/{Model.Id}", Model);
        }
        await Refresh();
        Model = new BenchmarkSource();
    }

    async void DeleteModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkSourceModal");
        if (Model.Id != -1)
        {
            await Http.DeleteAsync($"api/BenchmarkSources/{Model.Id}");
        }

        await Refresh();
        Model = new BenchmarkSource();
    }

    async void SubmitBenchmark()
    {
        Console.WriteLine($"{BulkBenchmark.ProductId} - {BulkBenchmark.BenchmarkId} - {BulkBenchmark.SourceId}");
        if (BulkBenchmark.ProductId != 0 && BulkBenchmark.BenchmarkId != 0 && BulkBenchmark.SourceId != 0)
        {
            BulkBenchmark.Id = 0;
            await Http.PostAsJsonAsync("api/BenchmarkEntries", BulkBenchmark);
        }
    }
}