@using FuzzySharp
@using MetaBenchmark.Shared.Models
@using MetaBenchmark.Shared

@inject DataCache cache;
@inject NavigationManager nav;
@inject IJSRuntime js;

@if(AllProducts != null && AllProducts.Count > 0)
{
    rand = new Random(1241245142);
    <div class="container">
        @{
            var p = AllProducts[0];
            var br = p.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
            var bc = br == null ?  "" : $"brand-{br.Spec.Value}";
        }
        <div class="row">
            <div class="col-6">
                <LandingItem product="p"/>
            </div>
            <div class="col-6">
                <LandingItem product="AllProducts[1]"/>
            </div>
        </div>
        <div class="row">
            @foreach(var prod in AllProducts)
            {
                var brand = prod.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
                var brandClass = brand == null ?  "" : $"brand-{brand.Spec.Value}";

                var benches = prod.BenchmarkEntries.GroupBy(b => b.Benchmark.Type).OrderBy(g => g.Key);
                <div class="col-12 col-md-4 col-lg-3 my-3">
                    <div class="card product h-100 p-3" @onclick="(() => Selected(prod))">
                        <div class="product-click-hint">
                            <span class="oi oi-external-link" aria-hidden="true"></span>
                        </div>
                        <h4 class="mb-3 d-flex product-name @brandClass">@prod.Name</h4>
                        <div class="my-auto">
                            @foreach(var group in benches)
                            {
                                var bench = group.ToList().RandomItem(rand);
                                var benchClass = GetTextClass(bench);
                                <div class="row pb-3 benchmark-entry">
                                    <div class="col my-auto">@bench.Benchmark.Name</div>
                                    <div class="col my-auto">
                                        <div class="benchmark-value text-right @benchClass">@bench.ValueLabel()</div>
                                        <div><img class="justify-content-end source-img" src="@bench.Source.LogoUrl" alt="@bench.Source.Name" title="@bench.Source.Name" /></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {

    List<Product> AllProducts = new List<Product>();

    //
    // Use the same seed every time so the selected benchmarks aren't changed as the UI refreshes.
    // This should probably be initialized to a different random seed on first load ¯\_(ツ)_/¯
    //
    Random rand = new Random(1241245142);

    protected override async Task OnInitializedAsync()
    {
        var all = await cache.All();
        AllProducts = all.Value;
    }

    void Selected(Product prod)
    {
        nav.NavigateTo($"product/{prod.Id}");
    }

    void Selected(Benchmark bench)
    {
        nav.NavigateTo($"benchmark/{bench.Id}");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }
}
