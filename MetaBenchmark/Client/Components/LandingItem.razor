@using MetaBenchmark.Shared.Models
@using MetaBenchmark.Shared

@inject IJSRuntime js
@inject NavigationManager nav

@if(product != null)
{
    <div class="card p-3 mb-3 landing-item" @onclick="(() =>{ Selected(product); })">
        <div class="product-click-hint">
            <span class="oi oi-external-link" aria-hidden="true"></span>
        </div>
        <div class="row">
            @{
                var b = product.BenchmarkEntries.ToList().RandomItem();
                var br = product.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
                var bc = br == null ?  "" : $"brand-{br.Spec.Value}";
            }
            <div class="col-3 my-auto pl-0 fade-in" @ref="prodDiv">
                <h4 class="d-flex product-name @bc">@product.Name</h4>
            </div>
            <div class="col my-auto fade-in" @ref="nameDiv">
                <div class="benchmark-name">
                    <h4>
                        @b.Benchmark.Name
                    </h4>
                </div>
                @if (b.Benchmark.Specs != null && b.Benchmark.Specs.Count > 0)
                {
                    <div class="benchmark-specs d-flex flex-wrap h5 justify-content-evenly">
                        @foreach(var spec in b.Benchmark.Specs)
                        {
                            <div class="d-block mx-1 my-1 badge badge-info benchmark-spec benchmark-spec-@spec.Spec.Name-@spec.Spec.Value"></div>
                        }
                    </div>
                }                            
            </div>
            <div class="col-auto my-auto" @ref="benchDiv">
                <div class="benchmark-value justify-content-end text-right @GetTextClass(b)">@b.ValueLabel()</div>
                <img class="justify-content-end source-img" src="@b.Source.LogoUrl" alt="@b.Source.Name" title="@b.Source.Name" />
            </div>
        </div>
    </div>
}

@code
{
    public Product product { get; set; }

    [Parameter]
    public List<Product> AllProducts { get; set; }

    ElementReference prodDiv;
    ElementReference nameDiv;
    ElementReference benchDiv;

    protected override void OnInitialized()
    {
        if(AllProducts != null)
        {
            product = AllProducts.RandomItem(Random.Shared);
        }
        Task.Run(Timer);
    }

    private async Task Timer()
    {
        await Task.Delay(Random.Shared.Next(6000, 12000));
        bool switchProd = Random.Shared.Next(0,10) > 6;
        await js.InvokeVoidAsync("FadeOut", nameDiv);
        await js.InvokeVoidAsync("FadeOut", benchDiv);
        if(switchProd)
        {
            await js.InvokeVoidAsync("FadeOut", prodDiv);
            product = AllProducts.RandomItem(Random.Shared);
        }
        await Task.Delay(250);
        StateHasChanged();
        await js.InvokeVoidAsync("FadeIn", nameDiv);
        await js.InvokeVoidAsync("FadeIn", benchDiv);

        if(switchProd)
        {
            await js.InvokeVoidAsync("FadeIn", prodDiv);
        }
        Task.Run(Timer);
    }

    void Selected(Product prod)
    {
        nav.NavigateTo($"product/{prod.Id}");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }    
}