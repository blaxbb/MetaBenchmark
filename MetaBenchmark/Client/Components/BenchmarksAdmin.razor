@using MetaBenchmark.Client.Components

@using MetaBenchmark.Shared.Models
@inject HttpClient Http
@inject IJSRuntime Js
@inject DataCache cache

<Modal Name="Add Benchmark" Id="AddBenchmarkModal">
	<h3>Add Benchmark</h3>
	<EditForm Model="Model">
		<div class="form-group">
			<label for="benchmarkName">Name</label>
			<InputText class="form-control" id="benchmarkName" placeholder="Name" @bind-Value=Model.Name />
		</div>
		<div class="form-group">
			<label for="benchmarkType">Benchmark Type</label>
			<InputSelect class="form-control" id="benchmarkType" @bind-Value=Model.Type>
                @foreach(var type in Enum.GetValues(typeof(Benchmark.BenchmarkType)))
                {
                    <option>@type</option>
                }
            </InputSelect>
		</div>
		<button @onclick=SubmitModel class="btn btn-primary">Submit</button>
        @if (Model.Id != -1)
        {
            <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
        }
	</EditForm>
</Modal>


@if(Benchmarks == null)
{
    <div>Loading....</div>
}
else
{    
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>
                    <button class="btn btn-primary btn-sm" @onclick=AddClick>Add</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var benchmark in Benchmarks)
            {
                <tr>
                    <td>@benchmark.Name</td>
                    <td>@benchmark.Type</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditClick(benchmark))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Benchmark> Benchmarks;
    Benchmark Model;

    protected override async Task OnInitializedAsync()
    {
        Model = new Benchmark();
        await Refresh();
    }

    async Task Refresh()
    {
        Benchmarks = (await cache.Benchmarks()).Value;
        this.StateHasChanged();
    }

    async void AddClick()
    {
        Model = new Benchmark();
        Model.Id = -1;
        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkModal");
    }

    async void EditClick(Benchmark product)
    {
        Model = new Benchmark()
        {
            Id = product.Id,
            Name = product.Name,
            Type = product.Type
        };

        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkModal");
    }

    async void SubmitModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkModal");
        if (Model.Id == -1)
        {
            Model.Id = Benchmarks.Max(b => b.Id) + 1;
            Benchmarks.Add(Model);
            await cache.SetBenchmarks(Benchmarks);
        }
        else
        {
            var existing = Benchmarks.FirstOrDefault(b => b.Id == Model.Id);
            if(existing != null)
            {
                Benchmarks.Remove(existing);
                Benchmarks.Add(Model);
                Benchmarks = Benchmarks.OrderBy(b => b.Id).ToList();
                await cache.SetBenchmarks(Benchmarks);
            }
        }
        StateHasChanged();
        Model = new Benchmark();
    }

    async void DeleteModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkModal");
        if (Model.Id != -1)
        {
            var existing = Benchmarks.FirstOrDefault(b => b.Id == Model.Id);
            if(existing != null)
            {
                Benchmarks.Remove(existing);
                await cache.SetBenchmarks(Benchmarks);
            }
        }

        this.StateHasChanged();
        Model = new Benchmark();
    }

}