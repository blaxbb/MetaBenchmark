@using MetaBenchmark.Shared.Models
@inject DataCache cache

<div class="form-group">
    <div class="row">
        <div class="col">
            <select class="form-control">
                @foreach(var name in AllSpecifications.GroupBy(s => s.Name).Select(s => s.Key))
                {
                    <option @onclick="() => {NewSpecName = name; this.StateHasChanged();}">@name</option>
                }
            </select>
        </div>
        <div class="col">
            <input type="text" class="form-control" id="addSpecName" placeholder="Name" @bind=NewSpecName />
        </div>
        <div class="col">
            <select class="form-control">
                @foreach(var val in AllSpecifications.Where(s => s.Name == NewSpecName).Select(s => s.Value).Distinct())
                {
                    <option @onclick="() => NewSpecValue = val">@val</option>
                }
            </select>
        </div>
        <div class="col">
            <input type="text" class="form-control" id="addSpecValue" placeholder="Value" @bind=NewSpecValue />
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick=AddSpecClicked>Add</button>
        </div>
    </div>
    <div class="row">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if(Model != null && Model.Specs != null)
                {
                    @foreach(var spec in Model?.Specs)
                    {
                            <tr>
                                <td>@spec?.Spec?.Name</td>
                                <td>@spec?.Spec?.Value</td>
                                <td><button class="btn btn-danger" @onclick="() => DeleteSpec(spec)">X</button></td>
                            </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public ISpecAttachable Model{ get; set; }

    [Parameter]
    public Specification.ItemType SpecType{ get; set; }

    [Parameter]
    public EventCallback<(ISpecAttachable model, List<Specification> allSpecs)> OnUpdated { get; set; }

    List<Specification> AllSpecifications = new List<Specification>();

    string NewSpecName = "";
    string NewSpecValue = "";

    protected override async Task OnInitializedAsync()
    {
        AllSpecifications = (await cache.Specifications()).Value;
    }

    async void AddSpecClicked()
    {
        if(this.Model.Id == -1)
        {
            return;
        }

        var spec = AllSpecifications.FirstOrDefault(s => s.Name == NewSpecName && s.Value == NewSpecValue && s.Type == SpecType);
        if (spec == null)
        {
            var existing = AllSpecifications.Any(s => s.Name == NewSpecName && s.Type == SpecType);
            long id = 0;
            if(!existing)
            {
                id = (AllSpecifications.Max(s => s.Id) / 1000) * 1000;
                id += 1000;
            }
            else
            {
                id = AllSpecifications.Where(s => s.Name == NewSpecName && s.Type == SpecType).Max(s => s.Id);
                id++;
            }

            spec = new Specification()
            {
                Name = NewSpecName,
                Value = NewSpecValue,
                Id = id,
                Type = SpecType
            };
            AllSpecifications.Add(spec);
            AllSpecifications = AllSpecifications.OrderBy(s => s.Id).ToList();
            await cache.SetSpecifications(AllSpecifications);
        }

        var entry = new SpecificationEntry()
        {
            Spec = spec,
            SpecId = spec.Id,
            ItemId = this.Model.Id,
        };

        if(Model.Specs == null)
        {
            Model.Specs = new List<SpecificationEntry>();
        }
        Model.Specs.Add(entry);

        NewSpecName = "";
        NewSpecValue = "";
        await OnUpdated.InvokeAsync((Model, AllSpecifications));
        this.StateHasChanged();
    }

    async void DeleteSpec(SpecificationEntry entry)
    {
        if(Model?.Specs != null)
        {
            this.Model.Specs.Remove(entry);
            Model.Specs.Remove(entry);
            await OnUpdated.InvokeAsync((Model, AllSpecifications));
            this.StateHasChanged();
        }
    }
}
