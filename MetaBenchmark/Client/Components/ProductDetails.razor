@inject IJSRuntime js

@using MetaBenchmark.Shared
@using MetaBenchmark.Shared.Models

@if(product != null)
{
    var brand = product.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
    var brandClass = brand == null ?  "" : $"brand-{brand.Spec.Value}";

    <div class="container">
        <div class="row">
            <div class="col-12 col-md-4 filter-col">
                <div class="product-name @brandClass">
                    <h1>@product.Name</h1>
                </div>
                <table class="table table-striped table-hover">
                    <tbody>
                        @foreach(var spec in product.Specs)
                        {
                            <tr>
                                <td>@spec.Spec.Name</td>
                                <td>@spec.Spec.Value</td>
                            </tr>
                        }      
                    </tbody>
                </table>
            </div>
            <div class="col-12 col-md-8">
                <div class="row filter-row">
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkTypeFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedBenchmarkType())">
                            @foreach(var type in product.BenchmarkEntries.Select(e => e.Benchmark.Type).Distinct())
                            {
                                if (CurrentBenchmarkType == type)
                                {
                                    <option selected value=@((int)type)>@type.DisplayName()</option>
                                }
                                else
                                {
                                    <option value=@((int)type)>@type.DisplayName()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkSourceFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedSource())"
                                title="Select Sources"
                                data-actions-box="true"
                                multiple>
                            @foreach(var source in product.BenchmarkEntries.Select(e => e.Source).Distinct().OrderBy(s => s.Name))
                            {
                                <option value=@((int)source.Id)>@source.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedBenchmark())"
                                title="Select Benchmarks"
                                data-actions-box="true"
                                data-selected-text-format="static"
                                multiple>
                            @foreach(var bench in AvailableBenchmarks.OrderBy(b => b.Name))
                            {
                                <option value=@((int)bench.ID)>@bench.Name</option>   
                            }
                        </select>
                    </div>
                </div>
                @foreach(var group in product.BenchmarkEntries.Where(FilterBenchmark).GroupBy(b => b.Benchmark).OrderBy(g => g.Key.Name))
                {
                    var count = group.Count();
                    var visibleCount = 2;
                    <div class="row benchmark py-1">
                        <div class="col-6 col-md-4 my-auto">
                            <h4>@group.Key.Name</h4>
                        </div>
                        <div class="col-6 col-md-8">
                            @for(int i = 0; i < visibleCount && i < count; i++)
                            {
                                var entry = group.ElementAt(i);
                                var textClass = GetTextClass(entry);
                                <div class="row benchmark-entry">
                                    <div class="col-12 col-md-6 mr-auto text-center"><a href="@entry.Source.Url"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></a></div>
                                    <div class="col-12 col-md-auto benchmark-value @textClass">@entry.ValueLabel()</div>
                                </div>
                            }

                            @if (count > visibleCount)
                            {
                                <div class="collapse" id="bench_@(group.Key.ID)_collapse">
                                    @for (int i = visibleCount; i < count; i++)
                                    {
                                        var entry = group.ElementAt(i);
                                        var textClass = GetTextClass(entry);
                                        <div class="row benchmark-entry">
                                            <div class="col-12 col-md-6 mr-auto text-center"><a href="@entry.Source.Url"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></a></div>
                                            <div class="col-12 col-md-auto benchmark-value @textClass">@entry.ValueLabel()</div>
                                        </div>
                                    }
                                </div>
                                <div>
                                    <button class="btn btn-sm btn-outline-info w-100 p-0" type="button" data-toggle="collapse" data-target="#bench_@(group.Key.ID)_collapse" aria-expanded="false" aria-controls="bench_@(group.Key.ID)_collapse">...</button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Product product { get; set; }

    Benchmark.BenchmarkType CurrentBenchmarkType = Benchmark.BenchmarkType.FPS_1440P;
    List<BenchmarkSource> CurrentSource = new List<BenchmarkSource>();
    List<Benchmark> CurrentBenchmarks = new List<Benchmark>();
    List<Benchmark> AvailableBenchmarks = new List<Benchmark>();

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("SET");
        await Task.Delay(1);
        SetAvailableBenchmarks();
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    void SetAvailableBenchmarks()
    {
        AvailableBenchmarks = product.BenchmarkEntries.Select(b => b.Benchmark).Where(b => CurrentBenchmarkType == b.Type).Distinct().ToList();
    }

    bool FilterBenchmark(BenchmarkEntry b)
    {
        var isType = b.Benchmark.Type == CurrentBenchmarkType;
        var isSource = CurrentSource == null || CurrentSource.Count == 0 || CurrentSource.Contains(b.Source);
        var isBench = CurrentBenchmarks == null || CurrentBenchmarks.Count == 0 || CurrentBenchmarks.Contains(b.Benchmark);

        return isType && isSource && isBench;
    }

    async Task SelectedBenchmarkType()
    {
        var val = await js.InvokeAsync<string>("GetVal", "#benchmarkTypeFilter");
        CurrentBenchmarkType = (Benchmark.BenchmarkType)(int.Parse(val));
        CurrentSource.Clear();
        SetAvailableBenchmarks();

        StateHasChanged();
        await Task.Delay(1);
        await js.InvokeVoidAsync("SelectPickerNone", "#benchmarkFilter");
        await js.InvokeVoidAsync("SelectPickerNone", "#benchmarkSourceFilter");
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedSource()
    {
        var vals = await js.InvokeAsync<string[]>("GetVal", "#benchmarkSourceFilter");
        CurrentSource.Clear();
        foreach(var val in vals)
        {
            if(long.TryParse(val, out long id))
            {
                var source = product.BenchmarkEntries.Select(b => b.Source).FirstOrDefault(s => s.Id == id);
                CurrentSource.Add(source);
            }
        }
        StateHasChanged();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedBenchmark()
    {
        var vals = await js.InvokeAsync<string[]>("GetVal", "#benchmarkFilter");
        CurrentBenchmarks.Clear();
        foreach(var val in vals)
        {
            if(long.TryParse(val, out long id))
            {
                var bench = product.BenchmarkEntries.Select(b => b.Benchmark).FirstOrDefault(s => s.ID == id);
                CurrentBenchmarks.Add(bench);
            }
        }

        StateHasChanged();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }
}
