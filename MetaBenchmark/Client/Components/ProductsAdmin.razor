@using MetaBenchmark.Client.Components

@using MetaBenchmark.Shared
@using MetaBenchmark.Shared.Models
@inject HttpClient Http
@inject IJSRuntime Js
@inject DataCache cache;

<Modal Name="Add Product" Id="AddProductModal">
	<EditForm Model="Model">
		<div class="form-group">
			<label for="productName">Name</label>
			<InputText class="form-control" id="productName" placeholder="Name" @bind-Value=Model.Name />
		</div>
		<div class="form-group">
			<label for="productType">Product Type</label>
			<InputSelect class="form-control" id="productType" @bind-Value=Model.Type>
                @foreach(var type in Enum.GetValues(typeof(Product.ProductType)))
                {
                    <option>@type</option>
                }
            </InputSelect>
		</div>
        @if(Model.ID != -1)
        {
            <div class="form-group">
                <div class="row">
                    <div class="col">
                        <select class="form-control">
                            @foreach(var name in AllSpecifications.GroupBy(s => s.Name).Select(s => s.Key))
                            {
                                <option @onclick="() => {NewSpecName = name; this.StateHasChanged();}">@name</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" id="addSpecName" placeholder="Name" @bind=NewSpecName />
                    </div>
                    <div class="col">
                        <select class="form-control">
                            @foreach(var val in AllSpecifications.Where(s => s.Name == NewSpecName).Select(s => s.Value).Distinct())
                            {
                                <option @onclick="() => NewSpecValue = val">@val</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" id="addSpecValue" placeholder="Value" @bind=NewSpecValue />
                    </div>
                    <div class="col">
                        <button class="btn btn-primary" @onclick=AddSpecClicked>Add</button>
                    </div>
                </div>
                <div class="row">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(Model != null && Model.Specs != null)
                            {
                                @foreach(var spec in Model?.Specs)
                                {
                                        <tr>
                                            <td>@spec?.Spec?.Name</td>
                                            <td>@spec?.Spec?.Value</td>
                                            <td><button class="btn btn-danger" @onclick="() => DeleteSpec(spec)">X</button></td>
                                        </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
		<button @onclick=SubmitModel class="btn btn-primary">Submit</button>
        @if (Model.ID != -1)
        {
            <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
        }
	</EditForm>
</Modal>


@if(Products == null)
{
    <div>Loading....</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th></th>
                <th><button class="btn btn-primary btn-sm" @onclick=AddProductClick>Add</button></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Type</td>
                    <td>
                        <a href="/admin/product/@product.ID" class="btn btn-primary btn-sm">
                            Details
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-primary  btn-sm" @onclick="(() => EditProductClick(product))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Product> Products;
    Product Model;
    string NewSpecName = "";
    string NewSpecValue = "";

    List<Specification> AllSpecifications = new List<Specification>();

    protected override async Task OnInitializedAsync()
    {
        Model = new Product();
        await Refresh();
    }

    async Task Refresh()
    {
        Products = (await cache.All()).Value;
        AllSpecifications = (await cache.Specifications()).Value;

        this.StateHasChanged();
    }

    async void AddProductClick()
    {
        Model = new Product();
        Model.ID = -1;
        await Js.InvokeVoidAsync("ShowModal", "#AddProductModal");
    }

    async void EditProductClick(Product product)
    {
        Model = new Product()
        {
            ID = product.ID,
            Name = product.Name,
            Type = product.Type,
            Specs = product.Specs
        };

        await Js.InvokeVoidAsync("ShowModal", "#AddProductModal");
    }

    async void SubmitModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddProductModal");
        if (Model.ID == -1)
        {
            Model.ID = Products.Max(p => p.ID) + 1;
            Products.Add(Model);
            
            await cache.SetProducts(Products);
        }
        else
        {
            var existing = Products.FirstOrDefault(p => p.ID == Model.ID);
            if(existing != null)
            {
                Products.Remove(existing);
                Products.Add(Model);
                Products = Products.OrderBy(p => p.ID).ToList();
                await cache.SetProducts(Products);
            }
        }
        StateHasChanged();
        Model = new Product();
    }

    async void DeleteModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddProductModal");
        if (Model.ID != -1)
        {
            var existing = Products.FirstOrDefault(p => p.ID == Model.ID);
            if(existing != null)
            {
                Products.Remove(existing);
                await cache.SetProducts(Products);
            }
        }

        StateHasChanged();
        Model = new Product();
    }

    async void AddSpecClicked()
    {
        if(Model.ID == -1)
        {
            return;
        }

        var spec = AllSpecifications.FirstOrDefault(s => s.Name == NewSpecName && s.Value == NewSpecValue);
        if (spec == null)
        {
            var existing = AllSpecifications.Any(s => s.Name == NewSpecName);
            long id = 0;
            if(!existing)
            {
                id = (AllSpecifications.Max(s => s.Id) / 1000) * 1000;
                id += 1000;
            }
            else
            {
                id = AllSpecifications.Where(s => s.Name == NewSpecName).Max(s => s.Id);
                id++;
            }

            spec = new Specification()
            {
                Name = NewSpecName,
                Value = NewSpecValue,
                Id = id
            };
            AllSpecifications.Add(spec);
            AllSpecifications = AllSpecifications.OrderBy(s => s.Id).ToList();
            await cache.SetSpecifications(AllSpecifications);
        }

        var entry = new SpecificationEntry()
        {
            Spec = spec,
            SpecId = spec.Id,
            ProductId = Model.ID,
        };

        var prod = Products.FirstOrDefault(p => p.ID == Model.ID);
        if(prod.Specs == null)
        {
            prod.Specs = new List<SpecificationEntry>();
        }
        prod.Specs.Add(entry);
        await cache.SetProducts(Products);

        NewSpecName = "";
        NewSpecValue = "";
        this.StateHasChanged();
    }

    async void DeleteSpec(SpecificationEntry entry)
    {
        var prod = Products.FirstOrDefault(p => p.ID == Model.ID);
        if(prod != null)
        {
            Model.Specs.Remove(entry);
            prod.Specs.Remove(entry);
            await cache.SetProducts(Products);
            this.StateHasChanged();
        }
    }

}