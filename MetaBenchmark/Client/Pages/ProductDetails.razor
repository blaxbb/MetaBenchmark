@page "/product/{ID}"
@inject HttpClient http
@using MetaBenchmark.Shared
@using MetaBenchmark.Client.Components
@using MetaBenchmark.Shared.Models

@inject IJSRuntime js
@inject HttpClient Http


@if(product == null || allBenchmarks == null)
{
	<div>Loading...</div>
}
else
{
    <Modal Id="AddBenchmarkEntryModal">
	    <h3>Add Benchmark Entry</h3>
	    <EditForm Model="Model">
		    <div class="form-group">
			    <label for="benchmark">Benchmark</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" @bind-Value=Model.BenchmarkId>
                    @foreach(var bench in allBenchmarks)
                    {
                        <option value="@bench.ID">@bench.Name</option>
                    }
                </InputSelect>
		    </div>
		    <div class="form-group">
			    <label for="benchmarkSource">Source</label>
                <InputSelect class="form-control selectpicker" id="benchmarkSource" data-live-search="true" @bind-Value=Model.SourceId>
                    @foreach(var source in allSources)
                    {
                        <option value="@source.Id">@source.Name</option>
                    }
                </InputSelect>
		    </div>
		    <div class="form-group">
			    <label for="benchmarkValue">Value</label>
			    <InputNumber class="form-control" id="benchmarkValue" placeholder="Value" @bind-Value=Model.Value />
		    </div>
		    <button @onclick=SubmitModel class="btn btn-primary">Submit</button>
            @if (Model.Id != -1)
            {
                <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
            }
	    </EditForm>	
    </Modal>

	<h3>@product.Name</h3>
	<div>@product.Type</div>
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Benchmark</th>
				<th>Type</th>
				<th></th>
                <th>
                    <button class="btn btn-primary btn-sm" @onclick=AddClick>Add</button>
                </th>
			</tr>
		</thead>
		<tbody>
			@foreach(var bench in product.BenchmarkEntries)
			{
				<tr>
					<td>@bench.Benchmark.Name</td>
					<td>@bench.Benchmark.Type</td>
					<td>@bench.Value</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditClick(bench))">
                            Edit
                        </button>
                    </td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
    [Parameter]
	public string ID { get; set; }
	Product product;
    Benchmark[] allBenchmarks;
    BenchmarkSource[] allSources;

	BenchmarkEntry Model;
	protected override async Task OnInitializedAsync()
	{
		await Refresh();
        allBenchmarks = await http.GetFromJsonAsync<Benchmark[]>($"api/Benchmarks");
        allSources = await http.GetFromJsonAsync<BenchmarkSource[]>($"api/BenchmarkSources");
	}

	async Task Refresh()
	{
		Model = new BenchmarkEntry();
		Model.Id = -1;
		product = await http.GetFromJsonAsync<Product>($"api/Products/{ID}");
        this.StateHasChanged();
	}

    async void AddClick()
    {
        Model = new BenchmarkEntry();
        Model.Id = -1;
        Model.ProductId = product.ID;
        await js.InvokeVoidAsync("ShowModal", "#AddBenchmarkEntryModal");
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async void EditClick(BenchmarkEntry entry)
    {
        Model = new BenchmarkEntry()
        {
            Id = entry.Id,
            BenchmarkId = entry.BenchmarkId,
            ProductId = entry.ProductId,
            Value = entry.Value
        };

        await js.InvokeVoidAsync("ShowModal", "#AddBenchmarkEntryModal");
    }

	async void SubmitModel()
    {
        await js.InvokeVoidAsync("HideModal", "#AddBenchmarkEntryModal");
        if (Model.Id == -1)
        {
            Model.Id = 0;
            await Http.PostAsJsonAsync("api/BenchmarkEntries", Model);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/BenchmarkEntries/{Model.Id}", Model);
        }
        await Refresh();
    }

    async void DeleteModel()
    {
        await js.InvokeVoidAsync("HideModal", "#AddBenchmarkEntryModal");
        if (Model.Id != -1)
        {
            await Http.DeleteAsync($"api/BenchmarkEntries/{Model.Id}");
        }

        await Refresh();
    }
}