@page "/admin"

@using MetaBenchmark.Client.Components
@using MetaBenchmark.Shared
@using MetaBenchmark.Shared.Models
@using Newtonsoft.Json;

@inject HttpClient Http
@inject IJSRuntime js
@inject DataCache cache

<div class="container">
	<div class="row">
		<button class="btn btn-secondary col-auto ml-auto" @onclick="Export">Export</button>
	</div>
	<div class="row">

		<!-- Nav tabs -->
		<ul class="nav nav-tabs" role="tablist">
			<li role="presentation" class="nav-item"><a class="nav-link active" href="#products" aria-controls="products" role="tab" data-toggle="tab">Products</a></li>
			<li role="presentation" class="nav-item"><a class="nav-link" href="#benchmarks" aria-controls="benchmarks" role="tab" data-toggle="tab">Benchmarks</a></li>
			<li role="presentation" class="nav-item"><a class="nav-link" href="#benchmarkSources" aria-controls="benchmarkSources" role="tab" data-toggle="tab">Sources</a></li>
		</ul>

		<!-- Tab panes -->
		<div class="tab-content p-0">
			<div role="tabpanel" class="tab-pane active" id="products">
				<ProductsAdmin />
			</div>
			<div role="tabpanel" class="tab-pane" id="benchmarks">
				<BenchmarksAdmin />
			</div>
			<div role="tabpanel" class="tab-pane" id="benchmarkSources">
				<BenchmarkSourcesAdmin />
			</div>		
		</div>
	</div>
</div>

@code {
	async Task Export()
	{
		var all = await cache.All();
		List<(string filename, string text)> files = new List<(string, string)>();
		if(all != null && all.Value != null)
		{
			files.AddRange(ExportBenchmarkFiles(all.Value));
			files.AddRange(ExportSpecificationFiles(all.Value));
			files.AddRange(ExportSourceFiles(all.Value));
			files.AddRange(ExportProductFiles(all.Value));
		}

		await js.InvokeVoidAsync("DownloadFile", "export.zip", files.Select(g => g.filename).ToList(), files.Select(g => g.text).ToList());
	}

	JsonSerializerSettings Settings => new JsonSerializerSettings()
	{
		Formatting = Formatting.Indented,
		DefaultValueHandling = DefaultValueHandling.Ignore,
		ReferenceLoopHandling = ReferenceLoopHandling.Ignore
	};

	IEnumerable<(string, string)> ExportBenchmarkFiles(IEnumerable<Product> all)
	{
		var benchmarkGroups = all.SelectMany(p => p.BenchmarkEntries).Select(e => e.Benchmark).Distinct().GroupBy(b => b.Type);
		foreach(var group in benchmarkGroups)
		{
			var type = group.Key;
			var items = group.ToList();
			items.ForEach(b => b.Type = Benchmark.BenchmarkType.FPS);
			var json = JsonConvert.SerializeObject(items.OrderBy(b => b.ID).ToList(), Settings);
			yield return ($"benchmarks/{type.ToString()}.json", json);
		}
	}

	IEnumerable<(string, string)> ExportSpecificationFiles(IEnumerable<Product> all)
	{
		var specGroups = all.SelectMany(p => p.Specs).Select(s => s.Spec).Distinct().GroupBy(s => s.Name);
		foreach(var group in specGroups)
		{
			var name = group.Key;
			var items = group.ToList();
			items.ForEach(s => s.Name = default);
			var json = JsonConvert.SerializeObject(group.ToList(), Settings);
			yield return ($"specifications/{name}.json", json);
		}
	}

	IEnumerable<(string, string)> ExportSourceFiles(IEnumerable<Product> all)
	{
		var sourceGroups = all.SelectMany(p => p.BenchmarkEntries).GroupBy(b => b.Source);
		foreach(var group in sourceGroups)
		{
			var source = group.Key;
			var items = group.ToList();
			items.ForEach(e =>
			{
				e.Benchmark = default;
				e.SourceId = 0;
			});
			source.BenchmarkEntries = items.OrderBy(b => b.ProductId).ThenBy(b => b.BenchmarkId).ThenBy(b => b.Value).ToList();
			var json = JsonConvert.SerializeObject(source, Settings);
			yield return ($"sources/{source.Name}.json", json);
		}
	}

	IEnumerable<(string, string)> ExportProductFiles(IEnumerable<Product> all)
	{
		var sorted = all.OrderBy(p => p.ID).ToList();
		sorted.ForEach(p =>
		{
			p.BenchmarkEntries = null;
			p.Specs = p.Specs.Select(s => new SpecificationEntry() { SpecId = s.SpecId }).ToList();
		});
		var json = JsonConvert.SerializeObject(sorted, Settings);
		yield return ($"products.json", json);
	}
}