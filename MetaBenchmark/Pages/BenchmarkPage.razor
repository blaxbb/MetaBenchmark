@page "/benchmark/{benchmarkId}"
@inject DataCache cache;
@inject IJSRuntime js;
@inject NavigationManager nav;

@using Newtonsoft.Json;
@using MetaBenchmark.Models;
@using MetaBenchmark;

@if (Benchmark != null)
{
    var appid = Benchmark?.Specs?.FirstOrDefault(s => s?.Spec?.Name == "AppId");
    const string COLOR_1 = "rgb(0 0 0 / 0%)";
    const string COLOR_2 = "rgb(20 20 20 / 69%)";
    //var style = appid?.Spec?.Value != null ? $"background-image: linear-gradient( {COLOR_1}, {COLOR_2} ),url(https://cdn.cloudflare.steamstatic.com/steam/apps/{appid.Spec.Value}/library_600x900.jpg);" : "";
    var style = appid?.Spec?.Value != null ? $"background-image: url(https://cdn.cloudflare.steamstatic.com/steam/apps/{appid.Spec.Value}/library_600x900.jpg);" : "";
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-4 filter-col benchmark-image px-0 border-0" style="@style">
                <div class="other-benchmarks card">
                    <ul class="list-group list-group-flush">
                        @foreach(var bench in AllBenchmarks.Where(b => b != Benchmark && b.Name == Benchmark.Name).Prepend(Benchmark))
                        {
                            <li class="list-group-item cursor-pointer benchmark-list-item">
                                <div class="d-flex flex-column curor-pointer position-relative" @onclick="(() => NavigateBenchmark(bench.Id))">
                                    <div class="product-click-hint"><span class="oi oi-external-link" aria-hidden="true"></span></div>
                                    <h5>@bench.Name</h5>
                                    @if (bench.Specs != null && bench.Specs.Count > 0)
                                    {
                                        <div class="benchmark-specs d-flex flex-wrap h5">
                                            @foreach(var spec in bench.Specs)
                                            {
                                                <div class="d-block mx-1 my-1 badge badge-info benchmark-spec benchmark-spec-@spec.Spec.Name benchmark-spec-@spec.Spec.Name-@spec.Spec.Value"></div>
                                            }
                                        </div>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-12 col-md-8 products-grid">
                <div class="row filter-row py-3">
                    <div class="col-auto">
                        <h1 class="my-auto">@Benchmark.Name</h1>
                    </div>
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkSourceFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedSource())"
                                title="Select Sources"
                                data-actions-box="true"
                                multiple>
                            @foreach(var source in Benchmark.Entries.Select(e => e.Source).Distinct().OrderBy(s => s.Name))
                            {
                                <option value=@((int)source.Id)>@source.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row py-3 h6 justify-content-md-center">
                    @foreach(var spec in Benchmark.Specs)
                    {
                        <div class="col-auto">
                            <span>@spec.Spec.Name</span>
                            <span> - </span>
                            <span>@spec.Spec.Value</span>
                        </div>
                    }  
                </div>
                @{
                    bool odd = true;
                }

                @foreach(var g in Benchmark.Entries.GroupBy(e => e.ProductId).OrderByDescending(g => g.Average(e => e.Value)))
                {
                    odd = !odd;
                    var group = g.ToList();
                    <div class="product-group @(odd ? "odd" : "even")">
                        @for(int i = 0; i < group.Count; i++)
                        {
                            var entry = group[i];

                            var brand = entry.Product?.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
                            var brandClass = brand == null ?  "" : $"brand-{brand.Spec.Value}";

                            <div class="row benchmark py-1">
                                <div class="col-6 col-md-4">
                                    <div class="d-flex align-items-center @(i > 0 ? "d-none" : "")" style="height: @(group.Count > 1 ? $"{group.Count}00%" : "100%");">
                                        <div class="product-click-hint"><span class="oi oi-external-link" aria-hidden="true"></span></div>
                                        <h4 class="d-flex product-name my-auto cursor-pointer @brandClass" @onclick="(() => NavigateProduct(entry.ProductId))">@entry.Product?.Name</h4>
                                    </div>
                                </div>
                                <div class="col-6 col-md-8 d-flex align-items-center">
                                    <div class="row benchmark-entry">
                                        <div class="col-12 col-md-6 mx-auto text-center"><a href="@entry.Source.Url"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></a></div>
                                        <div class="col-12 col-md-auto benchmark-value text-center my-auto @GetTextClass(entry)">@entry.ValueLabel()</div>
                                    </div>
                                </div>
                            </div>

                        }
                    </div>
                }
            </div>
        </div>
    </div>
}



@code {
    [Parameter]
    public string benchmarkId{  get;  set; }
    public List<Benchmark> AllBenchmarks { get; set; }
    public Benchmark Benchmark { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await InitializeData();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    private async Task InitializeData()
    {
        var benches = await cache.Benchmarks();
        if(benches != null)
        {
            AllBenchmarks = benches.Value;
        }
        else
        {
            AllBenchmarks = new List<Benchmark>();
            return;
        }

        if(long.TryParse(benchmarkId, out long id))
        {
            Benchmark = AllBenchmarks.FirstOrDefault(b => b.Id == id);
            if(Benchmark != default)
            {
                var all = await cache.All();

                Benchmark.Entries.AddRange(all?.Value.SelectMany(p => p.BenchmarkEntries).Where(e => e.BenchmarkId == Benchmark.Id));
                Benchmark.Entries.ForEach(e => e.Product = all?.Value.FirstOrDefault(p => p.Id == e.ProductId));
                Benchmark.Entries = Benchmark.Entries.OrderByDescending(e => e.Value).ToList();
            }
        }

        StateHasChanged();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedSource()
    {
        //var vals = await js.InvokeAsync<string[]>("GetVal", "#benchmarkSourceFilter");
        //CurrentSource.Clear();
        //foreach(var val in vals)
        //{
        //    if(long.TryParse(val, out long id))
        //    {
        //        var source = product.BenchmarkEntries.Select(b => b.Source).FirstOrDefault(s => s.Id == id);
        //        CurrentSource.Add(source);
        //    }
        //}
        //StateHasChanged();
        //await Task.Delay(100);
        //await js.InvokeVoidAsync("ShowSelectPicker");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }

    void NavigateProduct(long id) => nav?.NavigateTo($"/product/{id}");
    void NavigateBenchmark(long id) => nav?.NavigateTo($"/benchmark/{id}");
}
