@*@page "/admin/product/{ID}"
@inject HttpClient http
@using MetaBenchmark
@using MetaBenchmark.Components
@using MetaBenchmark.Models

@inject IJSRuntime js
@inject DataCache cache



@if(product == null || allBenchmarks == null)
{
	<div>Loading...</div>
}
else
{
    <Modal Id="AddBenchmarkEntryModal">
	    <h3>Add Benchmark Entry</h3>
	    <EditForm Model="Model">
		    <div class="form-group">
			    <label for="benchmark">Benchmark</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" @bind-Value=Model.BenchmarkId>
                    @foreach(var bench in allBenchmarks)
                    {
                        <option value="@bench.Id">@bench.Name</option>
                    }
                </InputSelect>
		    </div>
		    <div class="form-group">
			    <label for="benchmarkSource">Source</label>
                <InputSelect class="form-control selectpicker" id="benchmarkSource" data-live-search="true" @bind-Value=Model.SourceId>
                    @foreach(var source in allSources)
                    {
                        <option value="@source.Id">@source.Name</option>
                    }
                </InputSelect>
		    </div>
            <div class="form-group">
                <label for="benchmarkUrl">Source Url</label>
                <InputText class="form-control btn-dark" id="benchmarkUrl" placeholder="Url" @bind-Value=Model.Url />
            </div>
		    <div class="form-group">
			    <label for="benchmarkValue">Value</label>
			    <InputNumber class="form-control" id="benchmarkValue" placeholder="Value" @bind-Value=Model.Value />
		    </div>
            <div class="form-group">
                <label for="benchmarkSpecifcations"></label>
                <SpecificationEditor Model="Model" SpecType="Specification.ItemType.BenchmarkEntry" OnUpdated="((res) => SpecificationsUpdated(res.model, res.allSpecs))"/>
            </div>
		    <button @onclick=SubmitModel class="btn btn-primary">Submit</button>
            @if (Model.Id != -1)
            {
                <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
            }
	    </EditForm>
    </Modal>

	<h3>@product.Name</h3>
	<div>@product.Type</div>
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Benchmark</th>
				<th>Type</th>
				<th>Source</th>
                <th></th>
                <th>
                    <button class="btn btn-primary btn-sm" @onclick=AddClick>Add</button>
                </th>
			</tr>
		</thead>
		<tbody>
			@foreach(var bench in product.BenchmarkEntries)
			{
				<tr>
					<td>@bench.Benchmark.Name</td>
					<td>@bench.Benchmark.Type</td>
                    <td>@bench.Source.Name</td>
					<td>@bench.Value</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditClick(bench))">
                            Edit
                        </button>
                    </td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
    [Parameter]
    public string ID { get; set; }
    Product product;
    List<Benchmark> allBenchmarks;
    List<BenchmarkSource> allSources;
    BenchmarkEntry editing;

    BenchmarkEntry Model;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        allBenchmarks = (await cache.Benchmarks()).Value;
        allSources = (await cache.Sources()).Value;
    }

    async Task Refresh()
    {
        Model = new BenchmarkEntry();
        Model.Id = -1;
        var products = (await cache.All()).Value;
        product = products.FirstOrDefault(p => p.Id.ToString() == ID);
        this.StateHasChanged();
    }

    async void AddClick()
    {
        Model = new BenchmarkEntry();
        Model.Id = -1;
        Model.ProductId = product.Id;
        await js.InvokeVoidAsync("ShowModal", "#AddBenchmarkEntryModal");
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async void EditClick(BenchmarkEntry entry)
    {
        editing = entry;
        Model = new BenchmarkEntry()
        {
            Id = entry.Id,
            BenchmarkId = entry.BenchmarkId,
            ProductId = entry.ProductId,
            Value = entry.Value,
            Benchmark = entry.Benchmark,
            Product = entry.Product,
            Source = entry.Source,
            SourceId = entry.SourceId,
            Specs = entry.Specs,
            Url = entry.Url
        };

        await js.InvokeVoidAsync("ShowModal", "#AddBenchmarkEntryModal");
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async void SubmitModel()
    {
        await js.InvokeVoidAsync("HideModal", "#AddBenchmarkEntryModal");
        var source = allSources.FirstOrDefault(s => s.Id == Model.SourceId);
        if(source == null)
        {
            return;
        }
        if (Model.Id == -1)
        {
            Model.Id = 0;
            source.BenchmarkEntries.Add(Model);
            await cache.SetSources(allSources);
        }
        else
        {
            if(editing != null)
            {
                var existingSource = allSources.FirstOrDefault(s => s.Id == editing.SourceId);
                if(existingSource != null)
                {
                    existingSource.BenchmarkEntries.Remove(editing);
                }
                Model.Benchmark = null;
                Model.Product = null;
                Model.Source = null;
                source.BenchmarkEntries.Add(Model);
                await cache.SetSources(allSources);
                editing = null;
            }
        }
        await Refresh();
    }

    async void DeleteModel()
    {
        await js.InvokeVoidAsync("HideModal", "#AddBenchmarkEntryModal");
        if (editing != null)
        {
            var existingSource = allSources.FirstOrDefault(s => s.Id == editing.SourceId);
            if (existingSource != null)
            {
                existingSource.BenchmarkEntries.Remove(editing);
                await cache.SetSources(allSources);
            }
            editing = null;
        }

        await Refresh();
    }

    async void SpecificationsUpdated(ISpecAttachable model, List<Specification> allSpecs)
    {
        if(model is BenchmarkEntry entry)
        {
            var source = allSources.FirstOrDefault(s => s.Id == entry.SourceId);
            if(source != null)
            {
                var existingEntry = source.BenchmarkEntries.FirstOrDefault(b => b.Id == entry.Id);
                if (existingEntry != null)
                {
                    existingEntry.Specs = model.Specs;
                    await cache.SetSources(allSources);
                    await cache.SetSpecifications(allSpecs);
                }
            }
        }
    }
}*@