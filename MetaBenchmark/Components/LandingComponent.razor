@using FuzzySharp
@using MetaBenchmark.Models
@using MetaBenchmark

@inject DataCache cache;
@inject NavigationManager nav;
@inject IJSRuntime js;

@if(AllProducts != null && AllProducts.Count > 0)
{
    rand = new Random(1241245142);
    <div class="container">
        <div class="row">
            <div class="col-4">
                <div class="card">
                    <div class="card-header">
                        MetaBenchmark
                    </div>
                    <div class="card-body">
                        <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        Contributing
                    </div>
                    <div class="card-body">
                        <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </div>
                </div>
            </div>
            @foreach(var brand in AllProducts.Select(p => p.Brand).Distinct())
            {
                <div class="col">
                    @for(int i = 0; i < AllProducts.Count; i++)
                    {
                        if (AllProducts[i].Brand == brand)
                        {
                            <LandingItem Product="AllProducts[i]"/>
                        }
                    }
                </div>
            }
        </div>
    </div>
}


@code {

    List<Product> AllProducts = new List<Product>();

    //
    // Use the same seed every time so the selected benchmarks aren't changed as the UI refreshes.
    // This should probably be initialized to a different random seed on first load ¯\_(ツ)_/¯
    //
    Random rand = new Random(1241245142);

    protected override async Task OnInitializedAsync()
    {
        var all = await cache.All();
        AllProducts = all.Value;
    }

    void Selected(Product prod)
    {
        nav.NavigateTo($"product/{prod.Id}");
    }

    void Selected(Benchmark bench)
    {
        nav.NavigateTo($"benchmark/{bench.Id}");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }
}
