@using MetaBenchmark.Models
@using MetaBenchmark

@inject IJSRuntime js
@inject NavigationManager nav

@if(Product != null)
{
    var b = Product.BenchmarkEntries?.ToList()?.RandomItem();
    var br = Product.Specs.FirstOrDefault(s => s?.Spec?.Name == "brand");
    var bc = br == null ?  "" : $"brand-{br.Spec.Value}";
        
    var appid = b?.Benchmark?.Specs?.FirstOrDefault(s => s?.Spec?.Name == "AppId");
    var style = appid?.Spec?.Value != null ? $"background-image: linear-gradient( rgb(82 82 82 / 60%), rgb(60 60 60) ),url(https://cdn.cloudflare.steamstatic.com/steam/apps/{appid.Spec.Value}/header.jpg); background-size: cover; background-repeat: no-repeat;" : "";

    <div class="card p-0 mb-3 landing-item cursor-pointer" @onclick="(() =>{ Selected(Product); })">
        <div class="product-click-hint">
            <span class="oi oi-external-link" aria-hidden="true"></span>
        </div>
        <div class="row m-0" style="@style">
            <div class="col-xl-4 my-auto pl-0 fade-in text-center" @ref="prodDiv">
                <h5>@Product.Name</h5>
                <div class="benchmark-value text-center @GetTextClass(b)">@b.ValueLabel()</div>
            </div>
            <div class="col-xl my-auto fade-in" @ref="nameDiv">
                <div class="row benchmark-name my-3">
                    <h4>
                        @b.Benchmark.Name
                    </h4>
                </div>                         
                <div class="row mb-1" @ref="benchDiv">
                    <div class="col d-flex justify-content-center">
                        <img class="source-img" src="@b.Source.LogoUrl" alt="@b.Source.Name" title="@b.Source.Name" />
                    </div>
                </div>
                @if (b.Benchmark.Specs != null && b.Benchmark.Specs.Count > 0)
                {
                    <div class="benchmark-specs d-flex flex-wrap h6 justify-content-center">
                        @for(int i = 0; i < b.Benchmark.Specs.Count && i < 3; i++)
                        {
                            var spec = b.Benchmark.Specs.ElementAt(i);
                            <div class="d-block mx-1 my-1 badge badge-info benchmark-spec benchmark-spec-@spec.Spec.Name-@spec.Spec.Value"></div>
                        }
                    </div>
                }   
            </div>
        </div>
        <div class="filter-row m-0">
        </div>
    </div>
}

@code
{
    [Parameter]
    public Product? Product { get; set; }

    ElementReference prodDiv;
    ElementReference nameDiv;
    ElementReference benchDiv;

    protected override void OnInitialized()
    {
        Task.Run(Timer);
    }

    private async Task Timer()
    {
        await Task.Delay(Random.Shared.Next(6000, 12000));
        await js.InvokeVoidAsync("FadeOut", nameDiv);
        await js.InvokeVoidAsync("FadeOut", benchDiv);

        await Task.Delay(250);
        StateHasChanged();
        await js.InvokeVoidAsync("FadeIn", nameDiv);
        await js.InvokeVoidAsync("FadeIn", benchDiv);

        Task.Run(Timer);
    }

    void Selected(Product prod)
    {
        nav.NavigateTo($"product/{prod.Id}");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }    
}