@inject IJSRuntime js
@inject NavigationManager nav

@using MetaBenchmark
@using MetaBenchmark.Models

@if(product != null && allProducts != null)
{
    var brand = product.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
    var brandClass = brand == null ?  "" : $"brand-{brand.Spec.Value}";

    <div class="container">
        <div class="row">
            <div class="col-12 col-md-4 filter-col">
                <div class="row">
                    <div class="col product-name d-flex @brandClass">
                        <h1 class="my-auto">@product.Name</h1>
                    </div>
                </div>
                <button class="compare-button my-2 btn btn-secondary dropdown-toggle w-100 border-info" type="button" data-toggle="collapse" data-target="#collapseCompare" aria-expanded="false" aria-controls="collapseCompare">Compare</button>
                <div class="collapse w-100 mb-2" id="collapseCompare">
                    <div class="card py-1">
                        @foreach(var p in allProducts.Where(p => p != product && p.Type == product.Type))
                        {
                            var b = p.Specs.FirstOrDefault(s => s.Spec?.Name == "brand");
                            var bClass = b == null ?  "" : $"brand-{b.Spec.Value}";
                            <a class="btn btn-secondary product-name d-flex justify-content-center @bClass" @onclick="(() => Compare(p))">@p.Name</a>
                        }
                    </div>
                </div>
                <table class="table table-striped table-hover">
                    <tbody>
                        @foreach(var spec in product.Specs)
                        {
                            <tr>
                                <td>@spec.Spec.Name</td>
                                <td>@spec.Spec.Value</td>
                            </tr>
                        }      
                    </tbody>
                </table>
            </div>
            <div class="col-12 col-md-8">
                <div class="row filter-row">
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkTypeFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedBenchmarkType())">
                            @foreach(var type in product.BenchmarkEntries.Select(e => e.Benchmark.Type).Distinct())
                            {
                                if (CurrentBenchmarkType == type)
                                {
                                    <option selected value=@((int)type)>@type.DisplayName()</option>
                                }
                                else
                                {
                                    <option value=@((int)type)>@type.DisplayName()</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkSourceFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedSource())"
                                title="Select Sources"
                                data-actions-box="true"
                                multiple>
                            @foreach(var source in product.BenchmarkEntries.Select(e => e.Source).Distinct().OrderBy(s => s.Name))
                            {
                                <option value=@((int)source.Id)>@source.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control selectpicker form-control-lg"
                                id="benchmarkFilter"
                                data-style="btn-secondary"
                                @onchange="((val) => SelectedBenchmark())"
                                title="Select Benchmarks"
                                data-actions-box="true"
                                data-selected-text-format="static"
                                multiple>
                            @foreach(var bench in AvailableBenchmarks.OrderBy(b => b.Name))
                            {
                                <option value=@((int)bench.Id)>@bench.Name</option>   
                            }
                        </select>
                    </div>
                </div>
                <div class="row m-3">
                    <ProductChart Id="myChart"
                                    Labels="@product.BenchmarkEntries.Where(FilterBenchmark).DistinctBy(e => e.Benchmark).OrderBy(g => g.Benchmark.Name).Select(e => e.Benchmark.Name).ToList()"
                                    Values="@product.BenchmarkEntries.Where(FilterBenchmark).GroupBy(e => e.Benchmark).OrderBy(g => g.Key.Name).Select(g => g.Average(b => b.Value)).ToList()"
                                    MaxVal="@product.BenchmarkEntries.Max(e => e.Value)"/>
                </div>
                @foreach(var group in product.BenchmarkEntries.Where(FilterBenchmark).GroupBy(b => b.Benchmark).OrderBy(g => g.Key.Name))
                {
                    var bench = group.Key;
                    var count = group.Count();
                    var visibleCount = 2;
                    <div class="row benchmark py-1">
                        <div class="col-6 col-md-4 my-auto cursor-pointer" @onclick="(() => NavigateBenchmark(bench))">
                            <div class="product-click-hint"><span class="oi oi-external-link" aria-hidden="true"></span></div>
                            <h5>@group.Key.Name</h5>
                            @if (bench.Specs != null && bench.Specs.Count > 0)
                            {
                                <div class="benchmark-specs d-flex flex-wrap h5">
                                    @foreach(var spec in bench.Specs)
                                    {
                                        <div class="d-block mx-1 my-1 badge badge-info benchmark-spec benchmark-spec-@spec.Spec.Name benchmark-spec-@spec.Spec.Name-@spec.Spec.Value"></div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="col-6 col-md-8">
                            @for(int i = 0; i < visibleCount && i < count; i++)
                            {
                                var entry = group.ElementAt(i);
                                var textClass = GetTextClass(entry);
                                <div class="row benchmark-entry">
                                    <div class="col-12 col-md-6 mx-auto text-center"><a href="@entry.Source.Url"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></a></div>
                                    <div class="col-12 col-md-auto benchmark-value @textClass">@entry.ValueLabel()</div>
                                </div>
                            }

                            @if (count > visibleCount)
                            {
                                <div class="collapse" id="bench_@(group.Key.Id)_collapse">
                                    @for (int i = visibleCount; i < count; i++)
                                    {
                                        var entry = group.ElementAt(i);
                                        var textClass = GetTextClass(entry);
                                        <div class="row benchmark-entry">
                                            <div class="col-12 col-md-6 mr-auto text-center"><a href="@entry.Source.Url"><img src="@entry.Source.LogoUrl" alt="@entry.Source.Name" title="@entry.Source.Name" /></a></div>
                                            <div class="col-12 col-md-auto benchmark-value text-center @textClass">@entry.ValueLabel()</div>
                                        </div>
                                    }
                                </div>
                                <div>
                                    <button class="btn btn-sm btn-outline-info w-100 p-0" type="button" data-toggle="collapse" data-target="#bench_@(group.Key.Id)_collapse" aria-expanded="false" aria-controls="bench_@(group.Key.Id)_collapse">...</button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Product product { get; set; }

    [Parameter]
    public List<Product> allProducts { get; set; }

    [Parameter]
    public Benchmark.BenchmarkType CurrentBenchmarkType { get; set; }
    List<BenchmarkSource> CurrentSource = new List<BenchmarkSource>();
    List<Benchmark> CurrentBenchmarks = new List<Benchmark>();
    List<Benchmark> AvailableBenchmarks = new List<Benchmark>();

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
        var first = product?.BenchmarkEntries.FirstOrDefault();
        SetAvailableBenchmarks();
        await js.InvokeVoidAsync("ShowSelectPicker");
        this.StateHasChanged();
    }

    void SetAvailableBenchmarks()
    {
        if (product?.BenchmarkEntries != null)
        {
            AvailableBenchmarks = product.BenchmarkEntries.Select(b => b.Benchmark).Where(b => CurrentBenchmarkType == b.Type).Distinct().ToList();
        }
    }

    bool FilterBenchmark(BenchmarkEntry b)
    {
        var isType = b.Benchmark.Type == CurrentBenchmarkType;
        var isSource = CurrentSource == null || CurrentSource.Count == 0 || CurrentSource.Contains(b.Source);
        var isBench = CurrentBenchmarks == null || CurrentBenchmarks.Count == 0 || CurrentBenchmarks.Contains(b.Benchmark);

        return isType && isSource && isBench;
    }

    async Task SelectedBenchmarkType()
    {
        var val = await js.InvokeAsync<string>("GetVal", "#benchmarkTypeFilter");
        CurrentBenchmarkType = (Benchmark.BenchmarkType)(int.Parse(val));
        CurrentSource.Clear();
        SetAvailableBenchmarks();

        StateHasChanged();
        
        await js.InvokeVoidAsync("SetUrl", $"{nav.Uri}?bt={CurrentBenchmarkType}");

        await Task.Delay(1);
        await js.InvokeVoidAsync("SelectPickerNone", "#benchmarkFilter");
        await js.InvokeVoidAsync("SelectPickerNone", "#benchmarkSourceFilter");
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedSource()
    {
        var vals = await js.InvokeAsync<string[]>("GetVal", "#benchmarkSourceFilter");
        CurrentSource.Clear();
        foreach(var val in vals)
        {
            if(long.TryParse(val, out long id))
            {
                var source = product.BenchmarkEntries.Select(b => b.Source).FirstOrDefault(s => s.Id == id);
                CurrentSource.Add(source);
            }
        }
        StateHasChanged();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    async Task SelectedBenchmark()
    {
        var vals = await js.InvokeAsync<string[]>("GetVal", "#benchmarkFilter");
        CurrentBenchmarks.Clear();
        foreach(var val in vals)
        {
            if(long.TryParse(val, out long id))
            {
                var bench = product.BenchmarkEntries.Select(b => b.Benchmark).FirstOrDefault(s => s.Id == id);
                CurrentBenchmarks.Add(bench);
            }
        }

        StateHasChanged();
        await Task.Delay(100);
        await js.InvokeVoidAsync("ShowSelectPicker");
    }

    string GetTextClass(BenchmarkEntry entry)
    {
        switch(entry.Benchmark.Type)
        {
            case Benchmark.BenchmarkType.FPS:
            case Benchmark.BenchmarkType.FPS_4K:
            case Benchmark.BenchmarkType.FPS_1440P:
            case Benchmark.BenchmarkType.FPS_1080P:
                return entry.Value switch
                {
                    > 100 => "text-success",
                    > 60  => "text-primary",
                    _     => "text-warning"
                };
        }

        return "";
    }

    void Compare(Product other)
    {
        nav.NavigateTo($"compare?pt={product.Type}&bt={CurrentBenchmarkType}&products={product.Id},{other.Id}");
    }

    void NavigateBenchmark(Benchmark bench)
    {
        nav.NavigateTo($"benchmark/{bench.Id}");
    }
}
