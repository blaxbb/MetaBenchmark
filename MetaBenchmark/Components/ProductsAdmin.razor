@using MetaBenchmark.Components

@using MetaBenchmark
@using MetaBenchmark.Models
@using MetaBenchmark.Services
@inject HttpClient Http
@inject IJSRuntime Js
@inject DataService data

<Modal Name="Add Product" Id="AddProductModal">
	<EditForm Model="Model">
		<div class="form-group">
			<label for="productName">Name</label>
			<InputText class="form-control" id="productName" placeholder="Name" @bind-Value=Model.Name />
		</div>
		<div class="form-group">
			<label for="productType">Product Type</label>
			<InputSelect class="form-control" id="productType" @bind-Value=Model.Type>
                @foreach(var type in Enum.GetValues(typeof(Product.ProductType)))
                {
                    <option>@type</option>
                }
            </InputSelect>
		</div>
        @if(Model.Id != -1)
        {
            <SpecificationEditor Model="Model" SpecType="Specification.ItemType.Product" OnUpdated="((res) => SpecificationsUpdated(res.model, res.allSpecs))" />
        }
		<button @onclick=SubmitModel class="btn btn-primary">Submit</button>
        @if (Model.Id != -1)
        {
            <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
        }
	</EditForm>
</Modal>


@if(Products == null)
{
    <div>Loading....</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th></th>
                <th><button class="btn btn-primary btn-sm" @onclick=AddProductClick>Add</button></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Type</td>
                    <td>
                        <a href="/admin/product/@product.Id" class="btn btn-primary btn-sm">
                            Details
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-primary  btn-sm" @onclick="(() => EditProductClick(product))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Product> Products;
    Product Model;
    string NewSpecName = "";
    string NewSpecValue = "";

    List<Specification> AllSpecifications = new List<Specification>();

    protected override async Task OnInitializedAsync()
    {
        Model = new Product();
        await Refresh();
    }

    async Task Refresh()
    {
        Products = data.AllProducts();
        AllSpecifications = data.GetAllProductSpecifications();

        this.StateHasChanged();
    }

    async void AddProductClick()
    {
        Model = new Product();
        Model.Id = -1;
        await Js.InvokeVoidAsync("ShowModal", "AddProductModal");
    }

    async void EditProductClick(Product product)
    {
        Model = new Product()
        {
            Id = product.Id,
            Name = product.Name,
            Type = product.Type,
            Specs = product.Specs
        };

        await Js.InvokeVoidAsync("ShowModal", "AddProductModal");
    }

    async void SubmitModel()
    {
        await Js.InvokeVoidAsync("HideModal", "AddProductModal");
        if (Model.Id == -1)
        {
            Model.Id = Products.Max(p => p.Id) + 1;
            Products.Add(Model);
            
            //await cache.SetProducts(Products);
        }
        else
        {
            var existing = Products.FirstOrDefault(p => p.Id == Model.Id);
            if(existing != null)
            {
                Products.Remove(existing);
                Products.Add(Model);
                Products = Products.OrderBy(p => p.Id).ToList();
                //await cache.SetProducts(Products);
            }
        }
        StateHasChanged();
        Model = new Product();
    }

    async void DeleteModel()
    {
        await Js.InvokeVoidAsync("HideModal", "AddProductModal");
        if (Model.Id != -1)
        {
            var existing = Products.FirstOrDefault(p => p.Id == Model.Id);
            if(existing != null)
            {
                Products.Remove(existing);
                //await cache.SetProducts(Products);
            }
        }

        StateHasChanged();
        Model = new Product();
    }

    async void SpecificationsUpdated(ISpecAttachable model, List<Specification> allSpecs)
    {
        var prod = Products.FirstOrDefault(p => p.Id == model.Id);
        prod.Specs = model.Specs;
        //await cache.SetSpecifications(allSpecs);
        //await cache.SetProducts(Products);
    }
}