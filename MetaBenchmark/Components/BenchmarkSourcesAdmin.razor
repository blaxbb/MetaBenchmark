@using MetaBenchmark.Components
@using MetaBenchmark.Models

@using MetaBenchmark
@inject HttpClient Http
@inject IJSRuntime Js
@inject DataCache cache

<Modal Name="Add Benchmark Source" Id="AddBenchmarkSourceModal">
	<h3>Add Benchmark Source</h3>
	<EditForm Model="Model">
		<div class="form-group">
			<label for="sourceName">Name</label>
			<InputText class="form-control" id="sourceName" placeholder="Name" @bind-Value=Model.Name />
		</div>
		<div class="form-group">
			<label for="sourceUrl">Url</label>
			<InputText class="form-control" id="sourceUrl" placeholder="Url" @bind-Value=Model.Url />
		</div>
        <div class="form-group">
			<label for="sourceLogo">Logo</label>
			<InputText class="form-control" id="sourceLogo" placeholder="Logo" @bind-Value=Model.LogoUrl />
		</div>
		<button @onclick=SubmitModel class="btn btn-primary">Submit</button>
        @if (Model.Id != -1)
        {
            <button @onclick=DeleteModel class="btn btn-primary">Delete</button>
        }
	</EditForm>
</Modal>

@if (allProducts != null && allBenchmarks != null)
{
    <Modal Name="Add Benchmarks" Id="BulkAddBenchmarksModal">
        <EditForm Model="BulkBenchmark">
            <div class="form-group">
                <label for="benchmark">Benchmark</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" data-style="btn-dark" @bind-Value=BulkBenchmark.BenchmarkId>
                    @foreach (var bench in allBenchmarks)
                    {
                        <option value="@bench.Id">@bench.Label</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="benchmarkUrl">Source Url</label>
                <InputText class="form-control btn-dark" id="benchmarkUrl" placeholder="Url" @bind-Value=BulkBenchmark.Url />
            </div>
            <div class="form-group">
                <label for="benchmark">Product</label>
                <InputSelect class="form-control selectpicker" id="benchmark" data-live-search="true" data-style="btn-dark" @bind-Value=BulkBenchmark.ProductId>
                    @foreach (var prod in allProducts)
                    {
                        <option value="@prod.Id">@prod.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="benchmarkValue">Value</label>
                <InputNumber class="form-control btn-dark" id="benchmarkValue" placeholder="Value" @bind-Value=BulkBenchmark.Value />
            </div>
            <div class="form-group">
                <label for="benchmarkValue">Value</label>
                <SpecificationEditor Model="BulkBenchmark" SpecType="Specification.ItemType.BenchmarkEntry"/>
            </div>
            <button @onclick=SubmitBenchmark class="btn btn-primary">Submit</button>
        </EditForm>	
    </Modal>
}

@if(Sources == null)
{
    <div>Loading....</div>
}
else
{    
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th></th>
                <th>
                    <button class="btn btn-primary btn-sm" @onclick=AddClick>Add</button>
                </th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var source in Sources)
            {
                <tr>
                    <td>@source.Name</td>
                    <td></td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => EditClick(source))">
                            Edit
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="(() => AddBenchmarksClick(source))">
                            Add Benchmarks
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<BenchmarkSource> Sources;
    BenchmarkSource Model;

    List<Benchmark> allBenchmarks;
    List<Product> allProducts;
    BenchmarkEntry BulkBenchmark;


    protected override async Task OnInitializedAsync()
    {
        Model = new BenchmarkSource();
        BulkBenchmark = new BenchmarkEntry();
        await Refresh();
    }

    async Task Refresh()
    {
        Sources = (await cache.Sources()).Value;
        allBenchmarks = (await cache.Benchmarks()).Value;
        allProducts = (await cache.All()).Value;
        this.StateHasChanged();
    }

    async void AddClick()
    {
        Model = new BenchmarkSource();
        Model.Id = -1;
        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkSourceModal");
    }

    async void EditClick(BenchmarkSource source)
    {
        Model = new BenchmarkSource()
        {
            Id = source.Id,
            Name = source.Name,
            BenchmarkEntries = source.BenchmarkEntries,
            LogoUrl = source.LogoUrl,
            Url = source.Url
        };

        await Js.InvokeVoidAsync("ShowModal", "#AddBenchmarkSourceModal");
    }

    async void AddBenchmarksClick(BenchmarkSource source)
    {
        BulkBenchmark = new BenchmarkEntry()
        {
            SourceId = source.Id,
        };

        await Js.InvokeVoidAsync("ShowModal", "#BulkAddBenchmarksModal");
        await Js.InvokeVoidAsync("ShowSelectPicker");
    }

    async void SubmitModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkSourceModal");
        if (Model.Id == -1)
        {
            Model.Id = Sources.Max(s => s.Id) + 1;
            Sources.Add(Model);
            await cache.SetSources(Sources);
        }
        else
        {
            Sources.RemoveAll(s => s.Id == Model.Id);
            Sources.Add(Model);
            await cache.SetSources(Sources);
        }
        this.StateHasChanged();
        Model = new BenchmarkSource();
    }

    async void DeleteModel()
    {
        await Js.InvokeVoidAsync("HideModal", "#AddBenchmarkSourceModal");
        if (Model.Id != -1)
        {
            Sources.RemoveAll(s => s.Id == Model.Id);
            await cache.SetSources(Sources);
        }

        this.StateHasChanged();
        Model = new BenchmarkSource();
    }

    async void SubmitBenchmark()
    {
        if (BulkBenchmark.ProductId != 0 && BulkBenchmark.BenchmarkId != 0 && BulkBenchmark.SourceId != 0)
        {
            var source = Sources.FirstOrDefault(s => s.Id== BulkBenchmark.SourceId);
            if (source != null)
            {
                var newEntry = new BenchmarkEntry()
                {
                    BenchmarkId = BulkBenchmark.BenchmarkId,
                    ProductId = BulkBenchmark.ProductId,
                    SourceId = BulkBenchmark.SourceId,
                    Value = BulkBenchmark.Value,
                    Url = BulkBenchmark.Url,
                    Specs = new List<SpecificationEntry>()
                };

                if (BulkBenchmark.Specs != null)
                {
                    foreach (var spec in BulkBenchmark.Specs)
                    {
                        newEntry.Specs.Add(new SpecificationEntry()
                        {
                            Spec = spec.Spec
                        });
                    }
                }
                source.BenchmarkEntries.Add(newEntry);
                await cache.SetSources(Sources);
                this.StateHasChanged();
            }
        }
    }
}